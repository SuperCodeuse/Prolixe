const mysql = require('mysql2/promise');

const pool = require('../../config/database');

class ClassController {
    // R√©cup√©rer toutes les classes
    static async getAllClasses(req, res) {
        try {
            console.log('üìö R√©cup√©ration des classes...');

            const connection = await pool.getConnection();
            const [rows] = await connection.execute(`
                SELECT 
                  id,
                  name,
                  name as level,
                  FLOOR(RAND() * 15 + 20) as students,
                  'Mati√®re g√©n√©rale' as subject
                FROM CLASS 
                ORDER BY name
            `);

            console.log(`‚úÖ ${rows.length} classes trouv√©es`);

            res.json({
                success: true,
                data: rows,
                count: rows.length
            });

        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration classes:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la r√©cup√©ration des classes',
                error: error.message
            });
        }
    }

    // R√©cup√©rer une classe par ID
    static async getClassById(req, res) {
        try {
            const { id } = req.params;
            console.log(`üîç R√©cup√©ration classe ID: ${id}`);

            const connection = await pool.getConnection();
            const [rows] = await connection.execute(`
                SELECT 
                  id,
                  name,
                  name as level,
                  FLOOR(RAND() * 15 + 20) as students,
                  'Mati√®re g√©n√©rale' as subject
                FROM CLASS 
                WHERE id = ?
            `, [id]);

            if (rows.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'Classe non trouv√©e'
                });
            }

            console.log('‚úÖ Classe trouv√©e');
            res.json({
                success: true,
                data: rows[0]
            });

        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration classe:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la r√©cup√©ration de la classe',
                error: error.message
            });
        }
    }

    // Cr√©er une nouvelle classe
    static async createClass(req, res) {
        try {
            const { name } = req.body;

            if (!name || name.trim() === '') {
                return res.status(400).json({
                    success: false,
                    message: 'Le nom de la classe est requis'
                });
            }

            console.log(`‚ûï Cr√©ation classe: ${name}`);

            const connection = await pool.getConnection();

            // V√©rifier si la classe existe d√©j√†
            const [existingClass] = await connection.execute(
                'SELECT id FROM CLASS WHERE name = ?',
                [name.trim()]
            );

            if (existingClass.length > 0) {
                return res.status(409).json({
                    success: false,
                    message: 'Une classe avec ce nom existe d√©j√†'
                });
            }

            // Cr√©er la classe
            const [result] = await connection.execute(
                'INSERT INTO CLASS (name) VALUES (?)',
                [name.trim()]
            );

            // R√©cup√©rer la classe cr√©√©e
            const [newClass] = await connection.execute(
                'SELECT id, name FROM CLASS WHERE id = ?',
                [result.insertId]
            );

            const responseData = {
                ...newClass[0],
                level: newClass[0].name,
                students: 0,
                subject: 'Mati√®re g√©n√©rale'
            };

            console.log('‚úÖ Classe cr√©√©e avec succ√®s');
            res.status(201).json({
                success: true,
                data: responseData,
                message: 'Classe cr√©√©e avec succ√®s'
            });

        } catch (error) {
            console.error('‚ùå Erreur cr√©ation classe:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la cr√©ation de la classe',
                error: error.message
            });
        }
    }

    // Mettre √† jour une classe
    static async updateClass(req, res) {
        try {
            const { id } = req.params;
            const { name } = req.body;

            if (!name || name.trim() === '') {
                return res.status(400).json({
                    success: false,
                    message: 'Le nom de la classe est requis'
                });
            }

            console.log(`üìù Mise √† jour classe ID: ${id}`);

            const connection = await pool.getConnection();

            // V√©rifier si une autre classe a d√©j√† ce nom
            const [existingClass] = await connection.execute(
                'SELECT id FROM CLASS WHERE name = ? AND id != ?',
                [name.trim(), id]
            );

            if (existingClass.length > 0) {
                return res.status(409).json({
                    success: false,
                    message: 'Une autre classe avec ce nom existe d√©j√†'
                });
            }

            // Mettre √† jour
            const [result] = await connection.execute(
                'UPDATE CLASS SET name = ? WHERE id = ?',
                [name.trim(), id]
            );

            if (result.affectedRows === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'Classe non trouv√©e'
                });
            }

            // R√©cup√©rer la classe mise √† jour
            const [updatedClass] = await connection.execute(
                'SELECT id, name FROM CLASS WHERE id = ?',
                [id]
            );

            const responseData = {
                ...updatedClass[0],
                level: updatedClass[0].name,
                students: 0,
                subject: 'Mati√®re g√©n√©rale'
            };

            console.log('‚úÖ Classe mise √† jour');
            res.json({
                success: true,
                data: responseData,
                message: 'Classe mise √† jour avec succ√®s'
            });

        } catch (error) {
            console.error('‚ùå Erreur mise √† jour classe:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la mise √† jour de la classe',
                error: error.message
            });
        }
    }

    // Supprimer une classe
    static async deleteClass(req, res) {
        try {
            const { id } = req.params;
            console.log(`üóëÔ∏è Suppression classe ID: ${id}`);

            const connection = await pool.getConnection();

            // R√©cup√©rer les infos avant suppression
            const [classToDelete] = await connection.execute(
                'SELECT id, name FROM CLASS WHERE id = ?',
                [id]
            );

            if (classToDelete.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'Classe non trouv√©e'
                });
            }

            // Supprimer la classe
            const [result] = await connection.execute(
                'DELETE FROM CLASS WHERE id = ?',
                [id]
            );

            console.log('‚úÖ Classe supprim√©e');
            res.json({
                success: true,
                message: 'Classe supprim√©e avec succ√®s',
                data: classToDelete[0]
            });

        } catch (error) {
            console.error('‚ùå Erreur suppression classe:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur lors de la suppression de la classe',
                error: error.message
            });
        }
    }
}

module.exports = ClassController;
